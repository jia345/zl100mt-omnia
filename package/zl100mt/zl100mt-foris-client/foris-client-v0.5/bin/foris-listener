#!/usr/bin/env python

#
# foris-client
# Copyright (C) 2017 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
#

import argparse
import logging
import json
import os

logger = logging.getLogger("foris_listener")

LOGGER_MAX_LEN = 10000

if __name__ == "__main__":

    # Parse the command line options
    parser = argparse.ArgumentParser(prog="foris-listener")
    parser.add_argument("-d", "--debug", dest="debug", action="store_true", default=False)

    parser.add_argument(
        "-o", "--output", dest="output", default=None, type=str, metavar="OUTPUT_FILE",
        help="where to store output json data"
    )
    parser.add_argument(
        "-m", "--module", dest="module", help="to listen",
        required=False, type=str, default=None,
    )
    parser.add_argument(
        "-t", "--timeout", dest="timeout", help="timeout in ms (default=0 - listen forever)",
        type=int, default=0
    )
    parser.add_argument(
        "-l", "--log-file", default=None,
        help="file where the logs will we appended", required=False
    )

    subparsers = parser.add_subparsers(help="buses", dest="bus")
    ubus_parser = subparsers.add_parser("ubus", help="use ubus to obtain notificatins")
    ubus_parser.add_argument("--path", dest="path", default='/var/run/ubus.sock')
    unix_parser = subparsers.add_parser(
        "unix-socket", help="use unix socket to obtain notifications")
    unix_parser.add_argument("--path", dest="path", default='/tmp/foris-controller.soc')

    options = parser.parse_args()

    logging_format = "%(levelname)s:%(name)s:%(message)." + str(LOGGER_MAX_LEN) + "s"
    if options.debug:
        logging.basicConfig(level=logging.DEBUG, format=logging_format)
    else:
        logging.basicConfig(format=logging_format)

    if options.log_file:
        handler = logging.FileHandler(options.log_file)
        if options.debug:
            handler.setLevel(logging.DEBUG)
        handler.setFormatter(logging.Formatter("[%(created)f:%(process)d]" + logging.BASIC_FORMAT))
        logging.getLogger().addHandler(handler)

    if options.output:
        f = open(options.output, "w")
        f.flush()

        def print_to_file(data):
            f.write(json.dumps(data) + "\n")
            f.flush()

        handler = print_to_file
    else:
        f = None

        def print_to_stdout(data):
            print(json.dumps(data))

        handler = print_to_stdout

    try:
        if options.bus == "ubus":
            from foris_client.buses.ubus import UbusListener
            logger.debug("Using ubus to listen for notifications.")
            listener = UbusListener(options.path, handler, options.module, options.timeout)

        elif options.bus == "unix-socket":
            from foris_client.buses.unix_socket import UnixSocketListener
            logger.debug("Using unix-socket to listen for notifications.")
            try:
                os.unlink(options.path)
            except OSError:
                pass
            listener = UnixSocketListener(options.path, handler, options.module, options.timeout)

        listener.listen()
    finally:
        if f:
            f.close()
